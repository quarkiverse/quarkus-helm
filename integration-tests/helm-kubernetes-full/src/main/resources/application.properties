quarkus.helm.name=my-chart
# Kubernetes
quarkus.kubernetes.replicas=3
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.host=host.port
quarkus.kubernetes.annotations."my-annotation"=[{"HTTP": 80}, {"HTTPS":443}]
quarkus.kubernetes.annotations.foo=bar
quarkus.kubernetes.env.vars.OVERRIDE_PORT=8081
# Container image
quarkus.container-image.image=registry.com/name:version
# Dependencies
quarkus.helm.dependencies.dependency-name-a.version=0.0.1
quarkus.helm.dependencies.dependency-name-a.repository=http://localhost:8080
quarkus.helm.dependencies.1.name=dependency-name-b
quarkus.helm.dependencies.1.alias=app
quarkus.helm.dependencies.1.version=0.0.1
quarkus.helm.dependencies.1.repository=http://localhost:8080
quarkus.helm.dependencies.1.condition=app.dependencyBeEnabled
# Maintainers
quarkus.helm.maintainers.user1.email=user@group.com
# When path is not found
quarkus.helm.values.1.property=notFound
quarkus.helm.values.1.paths=metadata.not-found
# Using brackets path
quarkus.helm.values.foo.paths=(kind == Deployment).spec.template.metadata.annotations.foo
# Using values with profile
quarkus.helm.values.3.property=app.foo
quarkus.helm.values.3.value=Only for DEV!
quarkus.helm.values.3.profile=dev
# Using integer values
quarkus.helm.values.4.property=typesNumber
quarkus.helm.values.4.value-as-int=12
# Using boolean values
quarkus.helm.values.5.property=typesBool
quarkus.helm.values.5.value-as-bool=true
# Override host property
quarkus.helm.values.host.value=override-host-in-helm
# Rootless property
quarkus.helm.values."@.prop".value=rootless-property
# Resteasy Reactive
quarkus.resteasy-reactive.path=${OVERRIDE_PATH}
quarkus.host.port=${OVERRIDE_PORT:8080}
quarkus.host.name=something:${OVERRIDE_PART1}-${OVERRIDE_PART2:default}
## this should be ignored
quarkus.kubernetes.annotations.\"app.quarkus.io/vcs-url\"=${BUILD_TIME_PROPERTY}
# Use in tests
custom.system.property=${FROM_SYSTEM_PROPERTY}
custom.system.env=${FROM_SYSTEM_ENV}
custom.system.nested=${PARENT_PROPERTY:${NESTED_PROPERTY:nestedValue}}
custom.property.from.values=${app.dependencyBeEnabled}
another.property.from.values=${dependencyBeEnabled}
rootless.property.from.values=${prop}